let config = {
    conexionPath: "./network/organizations/peerOrganizations/org1.example.com/connection-org1.json",
    resultsPath: "./experiments/runs/{exp_name}/falcon/",
    identityName: "admin",
    channelName: "escchannel",
    chaincodeName: "falcon",
    csvResultsCalculationsHeader: "RESPONSES,TOTAL_TIME,ANALYSIS_TIME,FREQUENCY,TIME_DATA,FREQUENCY_DATA,RESPONSES_STORED,FROM_DATE,TO_DATE,MINIMUM_TIME,MAXIMUM_TIME,CURRENT_ESC_RUNNING,ANALYSIS_RETRIES,HOOK_DATA_RETRIES,INIT_EXEC_TIME,FINAL_EXEC_TIME,ID,GUARANTEES_NUMBER,METRICS_VALUES,GUARANTEES_VALUES\n",
    csvResultsExperimentHeader: "FREQUENCY,TIME_DATA,MIN_TIME,MAX_TIME,AVG_TIME,STD_TIME,SUCCESFUL_CALCULATIONS,CALCULATIONS_OVER_MAX\n",
    csvResultsHarvestHeader: "INIT_TIME,FINAL_TIME,TOTAL_TIME,INIT_UPDATE_TIME,FINAL_UPDATE_TIME,TOTAL_UPDATE_TIME,COLLECTOR_TIME,\n",

    executionTime: 20000,
    analysisFrequency: 30,
    harvestFrequency: 30,
    analysisStartDelay: 15,
    harvestStartDelay: 0,
    dataTimeLimit: 90,
    frequencyControlCalculate: 1,
    maximumTimeAnalysis: 3.2,
    minimumTimeAnalysis: 3,
    elasticityMode: "timeWindow",
    experimentName: "test",
    coldStart: false,
    numberOfESCs: 2,
    dataPerHarvest: 10,
    analysisRetryTime: 500,
    numberOfTimesForAnalysisAvg: 5,

    updateDataContract: "updateData",
    evaluateWindowTimeContract: "evaluateHistory",
    evaluateHarvestFrequencyContract: "evaluateFrequency",
    queryAnalysisHolderContract: "queryDataCalculation",
    analysisHolderId: 1,
    analysisContract: "analysis",
    dataStorageContract: "createData",
    calculationStorageContract: "createDataCalculation",

}
module.exports.configuration = config;